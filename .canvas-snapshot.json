{
  "quiz": {
    "id": 19086,
    "title": "Object Inheritance Quiz",
    "html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19086",
    "mobile_url": "https://learning.flatironschool.com/courses/3299/quizzes/19086?force_user=1&persist_headless=1",
    "description": "<div>\n<div><span>It's time to check your knowledge! Use this quiz to create a custom study guide. Note any answers that were marked incorrect, so you can study the relevant material and try this quiz again.</span></div>\n<br>\n<div><span>If you don't know the answer to a question, please do not guess. Instead, select \"I don't know\". It's OK not to know everything and to admit when we're unsure.</span></div>\n</div>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": false,
    "question_count": 7,
    "points_possible": 7.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_19086"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19086/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19086/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19086/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19086/submission_versions",
    "assignment_id": 129361,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 6376,
    "show_correct_answers_last_attempt": true,
    "version_number": 4,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "gc850a1dce3b251bae94f8d71a0903eb8",
    "question_types": [
      "multiple_choice_question",
      "multiple_dropdowns_question",
      "true_false_question"
    ]
  },
  "questions": [
    {
      "quiz_id": 19086,
      "id": 120506,
      "quiz_group_id": null,
      "assessment_question_id": 135355,
      "position": null,
      "question_name": "Object Inheritance: Fundamentals",
      "question_type": "multiple_choice_question",
      "question_text": "<p><span>Object inheritance means that an object can adopt all of the attributes and behaviors (i.e. all of the methods) of the parent/super class.</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/assignments/74056?module_item_id=143838\" target=\"_blank\">Defining Object Inheritance</a></p>",
      "answers": [
        {
          "id": 4971,
          "text": "True",
          "html": "",
          "comments": "",
          "comments_html": "Correct! Objects (or children) that inherit from a parent class have access to the parent's attributes, such as instance variables, and methods.",
          "weight": 100.0
        },
        {
          "id": 9078,
          "text": "False",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        },
        {
          "id": 6075,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120507,
      "quiz_group_id": null,
      "assessment_question_id": 135358,
      "position": null,
      "question_name": "Object Inheritance: Fundamentals",
      "question_type": "multiple_choice_question",
      "question_text": "<p><span>We have a <code>Computer</code> class and would like to declare <code>Laptop</code> as a subclass of <code>Computer</code>. Which syntax should we use?</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong><span>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/assignments/74056?module_item_id=143838\" target=\"_blank\">Defining Object Inheritance</a></span></p>",
      "answers": [
        {
          "id": 3362,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Laptop</span> &lt; <span class=\"pl-v\">Computer</span>\n\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Yes! We use the less than symbol followed by the name of the parent class to specify that <code>Laptop</code> inherits from <code>Computer</code>.",
          "weight": 100.0
        },
        {
          "id": 9579,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Computer</span> &gt; <span class=\"pl-v\">Laptop</span>\n\n<span class=\"pl-k\">end</span></pre>\n<p>&nbsp;</p>",
          "comments": "",
          "comments_html": "Not quite, but close. Try to think of it this way: which class is adding its properties to the subclass (child class)? Now, which way should the arrow point?",
          "weight": 0.0
        },
        {
          "id": 287,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Laptop</span>\n\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "This code declares the Laptop class but it doesn't cause the Laptop class to inherit from Computer. How can we make that happen? What's missing?",
          "weight": 0.0
        },
        {
          "id": 9496,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Computer</span> &lt; <span class=\"pl-v\">Laptop</span>\n\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "This would actually declare the <code>Computer</code> class and cause it to inherit from <code>Laptop</code>. How can we declare the <code>Laptop</code> class and make it inherit from <code>Computer</code> instead?",
          "weight": 0.0
        },
        {
          "id": 5788,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120508,
      "quiz_group_id": null,
      "assessment_question_id": 135359,
      "position": null,
      "question_name": "Object Inheritance: Fundamentals",
      "question_type": "multiple_choice_question",
      "question_text": "<pre><code>\nclass Computer\n  attr_accessor :name, :ram, :hd\n\n  def initialize(name, ram, hd)\n    @name = name\n    @ram_amount = ram\n    @hd_size = hd\n  end\n\n  def calculate\n    \"Crunching numbers!\"\n  end\nend\n</code></pre>\n<p><span>To overwrite an inherited method from&nbsp;</span><code>Computer</code><span>, which syntax should be used?</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong><span>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/assignments/74056?module_item_id=143838\" target=\"_blank\">Defining Object Inheritance</a></span></p>",
      "answers": [
        {
          "id": 3739,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Laptop</span> &lt; <span class=\"pl-v\">Computer</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">calculate</span>\n    <span class=\"pl-s\">\"Processing mathematics!\"</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Perfect! We declare the method with the same name inside the subclass and then write our code.",
          "weight": 100.0
        },
        {
          "id": 8127,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Computer</span>::<span class=\"pl-v\">Laptop</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">calculate</span>\n    <span class=\"pl-s\">\"Processing mathematics!\"</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Not quite. The double colon signifies namespacing, i.e. a module or class called Laptop would be declared inside of a module or class called Computer. This is different from inheritance.",
          "weight": 0.0
        },
        {
          "id": 6493,
          "text": "",
          "html": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Laptop</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">calculate</span>\n    <span class=\"pl-s\">\"Processing mathematics!\"</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Laptop is being declared, but it isn't inheriting from a parent class. How do we fix this?",
          "weight": 0.0
        },
        {
          "id": 9748,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120509,
      "quiz_group_id": null,
      "assessment_question_id": 135361,
      "position": null,
      "question_name": "Object Inheritance: Modules",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<pre><span class=\"pl-k\">module</span> <span class=\"pl-v\">Phrase</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">hello</span>\n    <span class=\"pl-s\">\"Hello!\"</span>\n  <span class=\"pl-k\">end</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">goodbye</span>\n    <span class=\"pl-s\">\"Good bye!\"</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Parrot</span>\n  <span class=\"pl-en\">include</span> <span class=\"pl-v\">Phrase</span>\n\n  <span class=\"pl-en\">attr_accessor</span> <span class=\"pl-pds\">:name</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c1\">@name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Human</span>\n  <span class=\"pl-en\">include</span> <span class=\"pl-v\">Phrase</span>\n\n  <span class=\"pl-en\">attr_accessor</span> <span class=\"pl-pds\">:name</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c1\">@name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre>\n<p>The inheritance shown in the code above is an example of what?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/assignments/74058?module_item_id=143840\" target=\"_blank\">Modules</a></p>",
      "answers": [
        {
          "id": 3710,
          "text": "Using methods from a module as instance methods",
          "html": "",
          "comments": "",
          "comments_html": "<p>Fantastic! The <code>include</code> keyword allows us to use the methods from the <code>Phrase</code> module in the <code>Parrot</code> and <code>Human</code> classes as instance methods.</p>",
          "weight": 100.0
        },
        {
          "id": 6118,
          "text": "Subclass inheritance",
          "html": "",
          "comments": "",
          "comments_html": "Not quite. Take a look at how <code>Parrot</code> and <code>Human</code> are declared. Does that look like the same syntax used for inheritance?",
          "weight": 0.0
        },
        {
          "id": 6896,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        },
        {
          "id": 2302,
          "text": "Using methods from a module as class methods",
          "html": "",
          "comments": "",
          "comments_html": "<p>Not quite. To use methods from a module as <strong>class</strong> methods, use the <code>extend</code> keyword, not <code>include</code>.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120510,
      "quiz_group_id": null,
      "assessment_question_id": 135363,
      "position": null,
      "question_name": "Object Inheritance: Modules",
      "question_type": "multiple_dropdowns_question",
      "question_text": "<pre><code>\nmodule Talk\n  module Phrases\n    def hello\n      \"Hello!\"\n    end\n\n    def goodbye\n      \"Good bye!\"\n    end\n  end\n\n  module Teachers\n    def teach\n      \"Repeat after me.\"\n    end\n  end\nend<br>\n</code></pre>\n<div>\n<div><span>The code sample above is an example of [a1]</span><span> modules. To access the Teachers module to include it in a class, we would type include [a2]</span><span>.</span></div>\n</div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong><span>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/assignments/74058?module_item_id=143840\" target=\"_blank\">Modules</a></span></p>",
      "answers": [
        {
          "id": 1150,
          "text": "nested",
          "comments": "",
          "comments_html": "Correct! Both <code>Teachers</code> and <code>Phrases</code> are nested inside of <code>Talk</code>. They can be accessed using <code>::</code>.",
          "weight": 100.0,
          "blank_id": "a1"
        },
        {
          "id": 6020,
          "text": "subclass inherited",
          "comments": "",
          "comments_html": "There aren't any classes, nor any subclass inheritance, in the syntax above. You might want to review the resource/s for this question.",
          "weight": 0.0,
          "blank_id": "a1"
        },
        {
          "id": 9846,
          "text": "I don't know",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0,
          "blank_id": "a1"
        },
        {
          "id": 4381,
          "text": "Talk::Teachers",
          "comments": "",
          "comments_html": "Correct! To <code>include</code> the <code>Teachers</code> module, we need to access it using <code>::</code> on the module that contains it.",
          "weight": 100.0,
          "blank_id": "a2"
        },
        {
          "id": 3358,
          "text": "Teachers::Talk",
          "comments": "",
          "comments_html": "When using <code>::</code> to access a nested module, we put the module that contains the other module on the left side of the double colon.",
          "weight": 0.0,
          "blank_id": "a2"
        },
        {
          "id": 6769,
          "text": "Talk.Teachers",
          "comments": "",
          "comments_html": "Not quite. This looks more like we're trying to call a method on <code>Talk</code>.",
          "weight": 0.0,
          "blank_id": "a2"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120511,
      "quiz_group_id": null,
      "assessment_question_id": 181183,
      "position": null,
      "question_name": "Object Inheritance: Modules",
      "question_type": "multiple_choice_question",
      "question_text": "<div><span>We want to declare a method on a subclass that has the same name as one that's declared on the parent class. The subclass's method should add to the parent class's functionality, rather than completely overwrite it. How do we do this?</span></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/super?module_item_id=143842\" target=\"_blank\">Super</a></p>",
      "answers": [
        {
          "id": 4875,
          "text": "",
          "html": "Use <code>super</code> in the subclass's method",
          "comments": "",
          "comments_html": "Correct! We can call <code>super</code> anywhere we want in the method to call the parent's method.",
          "weight": 100.0
        },
        {
          "id": 2702,
          "text": "",
          "html": "Use <code>extend</code> in the subclass's method",
          "comments": "",
          "comments_html": "Not quite. We use <code>extend</code> to mix in class methods from a module. You might want to review the resource/s for this question.",
          "weight": 0.0
        },
        {
          "id": 3500,
          "text": "",
          "html": "Use <code>include</code> in the subclass's method",
          "comments": "",
          "comments_html": "Not quite. We use <code>include</code> to mix in instance methods from a module. You might want to review the resource/s for this question.",
          "weight": 0.0
        },
        {
          "id": 6459,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19086,
      "id": 120512,
      "quiz_group_id": null,
      "assessment_question_id": 135365,
      "position": null,
      "question_name": "Object Inheritance: Super",
      "question_type": "multiple_choice_question",
      "question_text": "<pre><code>\nclass Furniture\n  def build\n    puts \"Your furniture is being built\"\n  end\nend\n</code></pre>\n<p>We have a parent class <code>Furniture</code> and a subclass <code>Table</code>. In the <code>Table</code> class, we want to be able to call <code>#build</code> and have it print \"You have chosen a table\" followed by \"Your furniture is being built\". Which code block achieves this? Choose the <strong>best</strong> option.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong><span>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/super?module_item_id=143842\" target=\"_blank\">Super</a></span></p>",
      "answers": [
        {
          "id": 5025,
          "text": "",
          "html": "<pre><code>\nclass Table &lt; Furniture\n  def build\n    puts \"You have chosen a table\"\n    super\n  end\nend\n</code>\n</pre>",
          "comments": "",
          "comments_html": "Yes! If Table inherits from Furniture we can supercharge the <code>#build</code> method by calling <code>super</code> after running whatever extra functionality we need to run first.",
          "weight": 100.0
        },
        {
          "id": 3886,
          "text": "",
          "html": "<pre><code>\nclass Table &lt; Furniture\n  def build\n    super\n    puts \"You have chosen a table\"\n  end\nend\n</code>\n</pre>",
          "comments": "",
          "comments_html": "Almost. In which order will the strings print? How can we make them print in the correct order?",
          "weight": 0.0
        },
        {
          "id": 3018,
          "text": "",
          "html": "<pre><code>\nclass Table\n  def build\n    puts \"You have chosen a table\"\n    puts \"Your furniture is being built\"\n  end\nend\n</code></pre>",
          "comments": "",
          "comments_html": "Not quite. While this will achieve what we want, we have repeated ourselves. What can we do instead to DRY up our code and ensure the strings print in the correct order?",
          "weight": 0.0
        },
        {
          "id": 7254,
          "text": "",
          "html": "<pre><code>\nclass Table &lt; Furniture\n  def build\n    puts \"You have chosen a table\"\n    puts \"Your furniture is being built\"\n  end\nend\n</code></pre>",
          "comments": "",
          "comments_html": "Not quite. While this will achieve what we want, we have repeated ourselves and we've also overwritten the parent's method. What can we do instead to DRY up our code and ensure the strings print in the correct order?",
          "weight": 0.0
        },
        {
          "id": 4556,
          "text": "I don't know.",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}